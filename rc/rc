#!/bin/sh
#
# Copyright (c) 2017-2018 Johnothan King. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Source rc.svc
. /etc/leaninit.d/rc.svc

# Set the $GETTY variable
GETTY=$(grep getty /etc/leaninit.d/ttys | sed '/#/d')

# Final operations rc does before exiting
finish() {
	# Open gettys on the ttys specified in /etc/leaninit.d/ttys
	print "Launching gettys on all ttys specified in /etc/leaninit.d/ttys..." log ${LIGHT_BLUE} ${WHITE}
	for tty in $(cat /etc/leaninit.d/ttys | sed '/#/d' | sed '/getty/d'); do
		fork "while true; do $GETTY $GETTYMODE $tty; done"
	done

	# Return to init
	exit 0
}

# Check all the file systems in /etc/fstab for damage, and repair them if needed
print "Checking all file systems for data corruption..." nolog ${LIGHT_PURPLE} ${WHITE}
DEFLINUX
fsck -A
ENDEF

DEFBSD
fsck -F
ENDEF

# Mount all drives
print "Mounting all drives..." nolog ${LIGHT_PURPLE} ${WHITE}
mount -a
mount -o remount,rw / 2> /dev/null || true

# Mount all ZFS file systems
if [ "$ZFS_ENABLE" = "true" ]; then

	# Done for compatibility with beadm(1)
	for z in "$(df -t zfs | tail -n +2 | awk '{print $1}')"; do
		zfs mount $z
	done

	# mount -a equivalent
	zfs mount -a

	# ZFS NFS
	zfs share -a

	# Turn on writes
	for z in $(zpool list -Ho name); do
		print "Turning readonly off for dataset $z" nolog ${LIGHT_PURPLE} ${WHITE}
		zfs readonly=off $z
	done
fi

# Swap
print "Turning on all swap partitions..." nolog ${LIGHT_PURPLE} ${WHITE}
swapon -a

# Remove the nologin and .status files
print "Removing any existing nologin files..." nolog ${LIGHT_PURPLE} ${WHITE}
rm -f /run/nologin /var/run/nologin
print "Resetting /var/run/leaninit" nolog ${LIGHT_PURPLE} ${WHITE}
rm -rf /var/run/leaninit
mkdir -p /var/run/leaninit

# Logging
touch $LOGFILE
mv $LOGFILE $LOGFILE.old
echo "LeanInit is running on $(uname -srm)" > $LOGFILE

# sysctl(8)
print "Launching sysctl(8)..." log ${LIGHT_BLUE} ${WHITE}
DEFLINUX
sysctl --system
ENDEF

DEFBSD
sysctl -f /etc/sysctl.conf
ENDEF

DEFLINUX
# Launch eudev (required for the X server to function)
print "Starting udev..." log ${LIGHT_BLUE} ${WHITE}
udevd --daemon
udevadm trigger --type=devices
udevadm trigger --type=subsystems
udevadm settle
ENDEF

DEFBSD
# Launch devd (vidcontrol -m is required for moused to function)
print "Starting devd..." log ${LIGHT_BLUE} ${WHITE}
vidcontrol -m on
fork "devd"
ENDEF

DEFLINUX
# Set up network interfaces
print "Setting up a loopback interface..." log ${LIGHT_BLUE} ${WHITE}
ip link set up lo
for n in $INTERFACE; do
	print "Setting up $n for networking..." log $(LIGHT_BLUE} $(WHITE}
	ip link set up $n
done

# Load all modules specified in /etc/modules-load.d
if [ -d /etc/modules-load.d ]; then
	print "Loading kernel modules..." log ${LIGHT_BLUE} ${WHITE}
	for m in $(cat /etc/modules-load.d/* | sed '/#/d'); do
		modprobe $m
	done
fi
ENDEF

# Set the hostname
if [ "$HOSTNAME" != "" ]; then
	print "Setting the hostname to $HOSTNAME..." log ${LIGHT_BLUE} ${WHITE}
	fork "hostname $HOSTNAME"
fi

DEFLINUX
# Set the keyboard layout (this requires kbd to work)
if [ "$KEYMAP" != "" ]; then
	print "Setting the keyboard layout to $KEYMAP..." log ${LIGHT_BLUE} ${WHITE}
	fork "loadkeys $KEYMAP"
fi
ENDEF

# If there are no services enabled, go to finish()
if [ "$(ls /etc/leaninit.d/svc.e)" = "" ]; then
	finish
fi

# Start the services
for sv in $(ls /etc/leaninit.d/svc.e); do
	fork "/etc/leaninit.d/svc.d/$sv start init"
done

# Wait for all services to finish starting before launching gettys
if [ "$CLEANBOOT" = "true" ]; then
	for sv in $(ls /etc/leaninit.d/svc.e); do
		until [ -r /var/run/leaninit/$sv.status ]; do
			false
		done
	done
fi

# Finish
finish
