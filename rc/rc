#!/bin/sh
#
# Copyright (c) 2017-2018 Johnothan King. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Source rc.svc
. /etc/leaninit.d/rc.svc

# Set the $GETTY variable
GETTY=$(grep getty /etc/leaninit.d/ttys | grep -v '#')

# Check all the file systems in /etc/fstab for damage, and repair them if needed
print "Checking all file systems for data corruption..." nolog ${PURPLE} ${WHITE}
DEFBSD
fsck -F
ENDEF
DEFLINUX
fsck -A

# Mount all drives
print "Mounting all drives..." nolog ${PURPLE} ${WHITE}
mount -a &
mount -o remount,rw / 2> /dev/null &

# Mount pseudo file systems
print "Mounting pseudo file systems..." nolog ${PURPLE} ${WHITE}
rm -rf /tmp/*
grep -q ' /dev '                 /etc/mtab || mount -o nosuid -t udev devtmpfs /dev &
grep -q ' /proc '                /etc/mtab || mount -o noexec,nosuid,nodev -t proc proc /proc &
grep -q ' /sys '                 /etc/mtab || mount -o noexec,nosuid,nodev -t sysfs sysfs /sys &
grep -q ' /tmp '                 /etc/mtab || mount -o noatime,noexec,nosuid,nodev,mode=1777 -t tmpfs tmpfs /tmp &
grep -q ' /run '                 /etc/mtab || mount -o noexec,nosuid -t tmpfs tmpfs /run &
wait
mkdir -p /dev/mqueue /dev/shm /dev/pts /run/shm
grep -q ' /dev/pts '             /etc/mtab || mount -o noexec,nosuid,gid=5,mode=0620 -t devpts devpts /dev/pts &
grep -q ' /dev/mqueue '          /etc/mtab || mount -t mqueue none /dev/mqueue &
grep -q ' /sys/kernel/security ' /etc/mtab || mount -t securityfs securityfs /sys/kernel/security &
grep -q ' /sys/fs/pstore '       /etc/mtab || mount -t pstore pstore /sys/fs/pstore &
grep -q ' /sys/fs/cgroup '       /etc/mtab || mount -t tmpfs cgroup /sys/fs/cgroup &
grep -q ' /run/shm '             /etc/mtab || mount -n -o noexec,nosuid,nodev -t tmpfs tmpfs /run/shm
mount --bind /run/shm /dev/shm &

# Load all modules specified in /etc/modules-load.d and by `kmod static-nodes`
if [ -d /etc/modules-load.d ] && [ -n "$(ls /etc/modules-load.d)" ]; then
	print "Loading kernel modules..." nolog ${PURPLE} ${WHITE}
	modprobe -a $(kmod static-nodes | awk '/Module:/ {print $2}') $(cat /etc/modules-load.d/* | grep -v '#')
fi &

# Launch either udev or mdev
if [ "$DEV" = "udev" ]; then
	print "Starting udev..." nolog ${PURPLE} ${WHITE}
	$DEVEXEC --daemon
	udevadm trigger --action=add
	udevadm settle
elif [ "$DEV" = "mdev" ]; then
	print "Starting mdev..." nolog ${PURPLE} ${WHITE}
	$DEVEXEC -s
	echo $DEVEXEC > /proc/sys/kernel/hotplug # The kernel must be built with hotplug support for this to work
fi &
wait $(jobs -p %-)
ENDEF

# Mount all ZFS file systems
if [ "$ZFS_ENABLE" = "true" ]; then
	print "Mounting all ZFS file systems..." nolog ${PURPLE} ${WHITE}

	# Done for compatibility with beadm(1)
	__LIST="$(df -t zfs | tail -n +2 | awk '{print $1}')"
	if [ -n "$__LIST" ]; then
		for z in $__LIST; do
			zfs mount $z
		done
	fi

	# mount -a equivalent
	zfs mount -a

	# ZFS NFS
	zfs share -a

	# Turn on writes
	__LIST="$(zpool list -Ho name)"
	if [ -n "$__LIST" ]; then
		for z in $__LIST; do
			print "Turning readonly off for dataset $z" nolog ${PURPLE} ${WHITE}
			zfs readonly=off $z
		done
	fi
fi

# Swap
print "Turning on all swap partitions..." nolog ${PURPLE} ${WHITE}
swapon -a &

# Logging
touch "$LOGFILE" "$LOGFILE.2"
mv "$LOGFILE"    "$LOGFILE.old"
mv "$LOGFILE.2"  "$LOGFILE.old.2"
echo "LeanInit has started logging on $(uname -srm)" > "$LOGFILE"

# sysctl(8)
print "Launching sysctl(8)..." log ${BLUE} ${WHITE}
DEFLINUX
sysctl --system &
ENDEF
DEFBSD
for s in /etc/sysctl.conf /etc/sysctl.conf.local; do
	if [ -r $s ]; then
		sysctl -f /etc/sysctl.conf &
	fi
done
ENDEF

# Remove the nologin and .status files
print "Removing any existing nologin files and resetting /var/run/leaninit..." nolog ${PURPLE} ${WHITE}
rm -rf /etc/nologin /run/nologin /var/run/nologin /var/run/leaninit
mkdir -p /var/run/leaninit

DEFBSD
# Launch devd (vidcontrol -m is required for moused to function)
print "Starting devd..." log ${BLUE} ${WHITE}
vidcontrol -m on
devd -n
ENDEF

DEFLINUX
# Set up network interfaces
print "Setting up a loopback interface..." log ${BLUE} ${WHITE}
ip link set up dev lo &
if [ -n "$NETFACE" ]; then
	for n in $NETFACE; do
		print "Setting up $n for networking..." log ${BLUE} ${WHITE}
		ip link set up dev $n &
	done
fi
ENDEF

# Set the hostname
if [ -n "$HOSTNAME" ]; then
	print "Setting the hostname to $HOSTNAME..." nolog ${PURPLE} ${WHITE}
	hostname $HOSTNAME
fi &

# Set the timezone
if [ -n "$TIMEZONE" ] && [ -r /usr/share/zoneinfo/$TIMEZONE ]; then
	print "Setting the timezone to $TIMEZONE..." nolog ${PURPLE} ${WHITE}
	ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime
fi &

DEFLINUX
# Set the keyboard layout (this requires kbd to work)
if [ -n "$KEYMAP" ]; then
	print "Setting the keyboard layout to $KEYMAP..." log ${BLUE} ${WHITE}
	loadkeys $KEYMAP
fi &
ENDEF

# D-Bus support
if [ "$DBUS_ENABLE" = "true" ]; then
	mkdir -p /run/dbus
	rm -f /var/run/dbus/pid
	print "Starting D-Bus..." log ${BLUE} ${WHITE}
	dbus-daemon --fork --system
	until [ -n "$(pgrep -x dbus-daemon)" ]; do
		sleep 7
		print "Failed to start D-Bus..." log ${RED}
		touch /var/run/leaninit/dbus-failure
		break
	done
fi &

# Wait for all jobs
wait

# Start all enabled services
__LIST="$(ls /etc/leaninit.d/svc.e)"
if [ -n "$__LIST" ]; then
	for sv in $__LIST; do
		INIT=true /etc/leaninit.d/svc.d/$sv start &
	done
fi

# Run rc.local (when present)
for r in /etc/leaninit.d/rc.local /etc/rc.local; do
	if [ -x $r ]; then
		sh $r &
	fi
done

# Wait for all services to start before launching gettys (debug mode)
if [ "$DEBUG" = "true" ]; then
	wait
fi

# Open gettys on the ttys specified in /etc/leaninit.d/ttys
print "Launching gettys on all ttys specified in /etc/leaninit.d/ttys..." log ${BLUE} ${WHITE}
for tty in $(grep -Ev '#|getty' /etc/leaninit.d/ttys); do
	rungetty "/dev/$tty" "$GETTY $GETTYMODE $tty" &
done

# Return to init
exit 0
